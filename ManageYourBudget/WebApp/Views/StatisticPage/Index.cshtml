@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = Localizer["Title.Statistic"];
}
@model IEnumerable<StatisticViewModel>
<head>
    <meta charset="utf-8" />
    <title>@Localizer["Title.Statistic"]</title>
    @{
        // string theme = ViewBag.Theme ?? "Dark"; // За замовчуванням використовується темна тема
        // string cssFileName = $"Statistic_{theme}.css";
        string cssFileName = $"Statistic_Light.css";
    }

    <link rel="stylesheet" href="~/css/@cssFileName">
    <style>
        a.btn {
            color: white;
        }
    </style>
</head>
<body>
    <div class="statistic">
        <div class="statistic-manipulation">
            <div class="form-group">
                <label for="startDate">@Localizer["Label.StartDate"]</label>
                <input type="date" class="form-control" id="startDate" name="startDate" />
            </div>
            <div class="form-group">
                <label for="endDate">@Localizer["Label.EndDate"]</label>
                <input type="date" class="form-control" id="endDate" name="endDate" />
            </div>
            <a id="getStatistics" class="btn btn-default" href="@Url.Action("GetStatistics", "StatisticPage", new { startDate=DateTime.Today.AddMonths(-1), endDate=DateTime.Today, format="CSV" })">@Localizer["Button.ShowStatistic"]</a>
            <a id="exportCsvLink" class="btn btn-default" href="@Url.Action("ExportStatistics", "StatisticPage", new { startDate = DateTime.Today.AddMonths(-1), endDate = DateTime.Today, format = "CSV" })">@Localizer["Button.ExportCSV"]</a>
            <a id="exportXmlLink" class="btn btn-default" href="@Url.Action("ExportStatistics", "StatisticPage", new { startDate = DateTime.Today.AddMonths(-1), endDate = DateTime.Today, format = "XML" })">@Localizer["Button.ExportXML"]</a>
            <a id="exportXlsxLink" class="btn btn-default" href="@Url.Action("ExportStatistics", "StatisticPage", new { startDate = DateTime.Today.AddMonths(-1), endDate = DateTime.Today, format = "XLSX" })">@Localizer["Button.ExportXLSX"]</a>
        </div>

        <div class="table">
            <table id="statisticsTable">
                <thead>
                    <tr>
                        <th>@Localizer["Table.Header.Income"]</th>
                        <th>@Localizer["Table.Header.SummaryExpenses"]</th>
                        <th>@Localizer["Table.Header.Saved"]</th>
                        <th>@Localizer["Table.Header.Month"]</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var statistic in Model)
                    {
                        <tr>
                            <td>@statistic.Incomes</td>
                            <td>@statistic.SummaryExpenses</td>
                            <td>@statistic.Savings</td>
                            <td>@statistic.Date.ToString("MMMM, yyyy")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <script>
        function updateExportLinks() {
            var startDate = document.getElementById('startDate').value;
            var endDate = document.getElementById('endDate').value;
            var baseUrl = '@Url.Action("ExportStatistics", "StatisticPage")';
            
            document.getElementById('exportCsvLink').href = `${baseUrl}?startDate=${startDate}&endDate=${endDate}&format=CSV`;
            document.getElementById('exportXmlLink').href = `${baseUrl}?startDate=${startDate}&endDate=${endDate}&format=XML`;
            document.getElementById('exportXlsxLink').href = `${baseUrl}?startDate=${startDate}&endDate=${endDate}&format=XLSX`;
            
            document.getElementById('getStatistics').href = `@Url.Action("GetStatistics", "StatisticPage")?startDate=${startDate}&endDate=${endDate}`;
        }

        document.getElementById('startDate').addEventListener('change', updateExportLinks);
        document.getElementById('endDate').addEventListener('change', updateExportLinks);
        
        // Call updateExportLinks to set initial values correctly
        updateExportLinks();
    </script>
</body>